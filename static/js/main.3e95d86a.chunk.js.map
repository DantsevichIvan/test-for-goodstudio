{"version":3,"sources":["Content.js","App.js","serviceWorker.js","index.js","App.module.css"],"names":["Content","data","className","styles","container","moment","date","format","src","url","alt","title","href","copyright","text","explanation","App","useState","setDate","useEffect","a","APodDate","localStorage","getItem","axios","get","response","saveDate","console","log","fetchData","app","header","form","name","onFinish","values","APod","dateNow","setItem","clear","getAPod","getDateAPod","_d","onFinishFailed","errorInfo","Item","rules","required","message","placeholder","type","htmlType","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","module","exports"],"mappings":"0WAMe,SAASA,EAAT,GAA2B,IAARC,EAAO,EAAPA,KAC9B,OACI,yBAAKC,UAAWC,IAAOC,WACnB,8BAAOC,IAAOJ,EAAKK,MAAMC,OAAO,OAChC,yBAAKC,IAAKP,EAAKQ,IAAKC,IAAI,KACxB,yBAAKR,UAAWC,IAAOQ,OACnB,8BAAOV,EAAKU,OACZ,2DAAgC,uBAAGC,KAAMX,EAAKY,WAAYZ,EAAKY,aAEnE,yBAAKX,UAAWC,IAAOW,MACnB,2BAAG,8CAAH,IAA8Bb,EAAKc,eCPpC,SAASC,IAAO,IAAD,EACFC,mBAAS,MADP,mBACnBhB,EADmB,KACbiB,EADa,KAE1BC,qBAAU,WAAM,4CACZ,8BAAAC,EAAA,oEAEYC,EAAWC,aAAaC,QAAQ,SAF5C,gCAKiCC,IAAMC,IAAN,mDAAsDJ,EAAtD,sDALjC,OAKgBK,EALhB,OAMYC,EAASD,GANrB,yDASQE,QAAQC,IAAR,MATR,2DADY,uBAAC,WAAD,wBAaZC,KACD,IACH,IAAMH,EAAW,SAAC1B,GACdiB,EAAQjB,EAAKA,OA4BjB,OACI,yBAAKC,UAAWC,IAAO4B,KACnB,yBAAK7B,UAAWC,IAAO6B,QACnB,+DAEJ,yBAAK9B,UAAWC,IAAO8B,MACnB,kBAAC,IAAD,CACIC,KAAK,QACLC,SAfC,SAAAC,IAnBG,SAACC,GAAS,4CAC1B,WAAuBhB,GAAvB,iBAAAD,EAAA,sEAEYkB,EAAUjC,MAASE,OAAO,cACZF,IAAOgB,GAAUd,OAAO,gBACtB+B,EAChBhB,aAAaiB,QAAQ,OAAQlB,GAE7BC,aAAakB,QAPzB,SAS+BhB,IAAMC,IAAN,mDAAsDJ,EAAtD,sDAT/B,OAScK,EATd,OAUQC,EAASD,GAVjB,kDAYQE,QAAQC,IAAR,MAZR,2DAD0B,uBAAC,SAAD,2BAiB1BY,CAAQJ,GAIRK,CADarC,IAAO+B,EAAO9B,KAAKqC,IAAIpC,OAAO,gBAe/BqC,eAZO,SAAAC,GACnBjB,QAAQC,IAAI,UAAWgB,KAaX,kBAAC,IAAKC,KAAN,CACIZ,KAAK,OACLa,MAAO,CACH,CACIC,UAAU,EACVC,QAAS,wBAIjB,kBAAC,IAAD,CAAYC,YAAY,iBAE5B,kBAAC,IAAKJ,KAAN,KACI,kBAAC,IAAD,CAAQK,KAAK,UAAUC,SAAS,UAAhC,aAMTnD,EAAO,kBAACD,EAAD,CAASC,KAAMA,IAAS,MCxE1BoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC5C,EAAD,OAEF6C,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMrB,a,mBExI5BsB,EAAOC,QAAU,CAAC,IAAM,iBAAiB,OAAS,oBAAoB,UAAY,uBAAuB,MAAQ,mBAAmB,KAAO,kBAAkB,KAAO,qB","file":"static/js/main.3e95d86a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport styles from \"./App.module.css\";\r\nimport moment from \"moment\";\r\n\r\n\r\n\r\nexport default function Content ({data}) {\r\n    return(\r\n        <div className={styles.container}>\r\n            <span>{moment(data.date).format('LL')}</span>\r\n            <img src={data.url} alt=\"\"/>\r\n            <div className={styles.title}>\r\n                <span>{data.title}</span>\r\n                <span>Image Credit & Copyright: <a href={data.copyright}>{data.copyright}</a></span>\r\n            </div>\r\n            <div className={styles.text}>\r\n                <p><span>Explanation:</span> {data.explanation}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import React, {useEffect, useState} from 'react';\nimport styles from './App.module.css'\nimport {Button, DatePicker, Form} from \"antd\";\nimport axios from 'axios'\nimport moment from \"moment\";\nimport 'antd/dist/antd.css';\nimport Content from \"./Content\";\n\n\nexport default function App() {\n    const [data, setDate] = useState(null)\n    useEffect(() => {\n        async function fetchData() {\n            try {\n                let APodDate = localStorage.getItem('date')\n                if (!!APodDate) {\n                    debugger\n                    let response = await axios.get(`https://api.nasa.gov/planetary/apod?date=${APodDate}&api_key=vNa879Y6sVjEvsjjreeH5dFAPSwq99j5QYvV1LiA`)\n                    saveDate(response)\n                }\n            } catch (e) {\n                console.log(e)\n            }\n        }\n        fetchData()\n    }, [])\n    const saveDate = (data) => {\n        setDate(data.data)\n    }\n    const getDateAPod = (APod) => {\n        async function getAPod(APodDate) {\n            try {\n                let dateNow = moment().format('YYYY-MM-DD')\n                let currentDate = moment(APodDate).format('YYYY-MM-DD')\n                if (currentDate !== dateNow) {\n                    localStorage.setItem('date', APodDate)\n                }else {\n                    localStorage.clear()\n                }\n                const response = await axios.get(`https://api.nasa.gov/planetary/apod?date=${APodDate}&api_key=vNa879Y6sVjEvsjjreeH5dFAPSwq99j5QYvV1LiA`)\n                saveDate(response)\n            } catch (e) {\n                console.log(e)\n            }\n        }\n\n        getAPod(APod)\n    }\n    const onFinish = values => {\n        const APod = moment(values.date._d).format('YYYY-MM-DD');\n        getDateAPod(APod)\n    };\n    const onFinishFailed = errorInfo => {\n        console.log('Failed:', errorInfo);\n    };\n    return (\n        <div className={styles.app}>\n            <div className={styles.header}>\n                <span>Astronomy Picture of the Day</span>\n            </div>\n            <div className={styles.form}>\n                <Form\n                    name=\"basic\"\n                    onFinish={onFinish}\n                    onFinishFailed={onFinishFailed}\n                >\n                    <Form.Item\n                        name=\"date\"\n                        rules={[\n                            {\n                                required: true,\n                                message: 'Please input Date!',\n                            },\n                        ]}\n                    >\n                        <DatePicker placeholder=\"select date\"/>\n                    </Form.Item>\n                    <Form.Item>\n                        <Button type=\"primary\" htmlType=\"submit\">\n                            Submit\n                        </Button>\n                    </Form.Item>\n                </Form>\n            </div>\n            {!!data?  <Content data={data}/>: null}\n        </div>\n    );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__3aV_r\",\"header\":\"App_header__380vE\",\"container\":\"App_container__2VkRd\",\"title\":\"App_title__2-xBp\",\"text\":\"App_text__18KYd\",\"form\":\"App_form__1WInb\"};"],"sourceRoot":""}